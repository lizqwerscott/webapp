(in-package :web-manager.handle)

(defun find-compressed (path)
  (let ((compressed-files ()) (no-compressed-files ()) (dir ()))
    (dolist (file (directory (merge-pathnames (make-pathname :name :wild :type :wild) path)))
      (if (and (not (pathname-type file)) (not (pathname-name file)))
          (setf dir (append dir (list file)))
          (let ((ft (pathname-type file))) 
            (if (or (string= ft "zip") (string= ft "rar") (string= ft "7z"))
                (setf compressed-files (append compressed-files (list file)))
                (setf no-compressed-files (append no-compressed-files (list file)))))))
    (list compressed-files (no-compressed) (dir))))

(defun recursive-find-compressed-and-extract (path)
  (dolist (compressed (nth 0 (find-compressed path :dirp t)))
    (extract compressed (get-directory compressed) "nil"))
  (let ((files-dirs (find-compressed path :dirp t)))
    (if (nth 2 files-dirs)
        (dolist (dir (nth 2 files-dirs))
          (recursive-find-compressed-and-extract dir))
        (format t "Finish~%"))))

(defun zip-or-unzip (plist-info)
  (format t "zip-or-unzip~%")
  (let ((files-dirs (find-compressed :no-compressedp t :dirp t)))
    (dolist (i (nth 0 files-dirs))
      (extract i (getf plist-info :b-path) (getf plist-info :password)))
    (let ((need-zip-files (append (nth 1 files-dirs) (nth 2 files-dirs)))) 
      (if (= 0 (length need-zip-files)) 
          (format t "the need files-directory is null~%")
          (zip-file need-zip-files (getf plist-info :y-path) (getf plist-info :id)))
      (dolist (i directorys)
        (format t "movedir;~A~%" i)
        (move-files i (getf plist-info :b-path)))))
  (recursive-find-compressed-and-extract (getf plist-info :b-path)))

(defun handle (plist-info)
  (format t "This is handle, now handle name:~A.~%" (getf plist-info :id))
  (if (getf plist-info :zipp) 
      (zip-or-unzip plist-info)))



(in-package :cl-user)
